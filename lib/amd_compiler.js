// Generated by CoffeeScript 1.4.0
(function() {
  var AMDCompiler, AbstractCompiler,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractCompiler = require('./abstract_compiler');

  AMDCompiler = (function(_super) {

    __extends(AMDCompiler, _super);

    function AMDCompiler() {
      return AMDCompiler.__super__.constructor.apply(this, arguments);
    }

    AMDCompiler.prototype.stringify = function() {
      var args, ex, line, name, output, preamble, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      _ref = this.buildPreamble(this.dependencyNames), args = _ref[0], preamble = _ref[1];
      if (this.exports.length !== 0) {
        this.dependencyNames.push('exports');
        args.push('__exports__');
      }
      output = [];
      if (this.moduleName) {
        output.push("define(\"" + this.moduleName + "\",");
      } else {
        output.push("define(");
      }
      output.push("  [" + (((function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.dependencyNames;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          name = _ref1[_i];
          _results.push(JSON.stringify(name));
        }
        return _results;
      }).call(this)).join(', ')) + "],");
      output.push("  function(" + (args.join(', ')) + ") {");
      output.push("    \"use strict\";");
      for (_i = 0, _len = preamble.length; _i < _len; _i++) {
        line = preamble[_i];
        output.push("    " + line);
      }
      _ref1 = this.lines;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        line = _ref1[_j];
        if (/^\s*$/.test(line)) {
          output.push(line);
        } else {
          output.push("    " + line);
        }
      }
      _ref2 = this.exports;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        ex = _ref2[_k];
        output.push("    __exports__." + ex + " = " + ex + ";");
      }
      if (this.exportAs) {
        output.push("    return " + this.exportAs + ";");
      }
      output.push("  });");
      return output.join('\n');
    };

    return AMDCompiler;

  })(AbstractCompiler);

  module.exports = AMDCompiler;

}).call(this);
