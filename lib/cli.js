// Generated by CoffeeScript 1.4.0
(function() {
  var CLI, Compiler, fs, optimist;

  optimist = require('optimist');

  fs = require('fs');

  Compiler = require('./compiler');

  CLI = (function() {

    CLI.start = function(argv, stdin, stdout) {
      if (stdin == null) {
        stdin = process.stdin;
      }
      if (stdout == null) {
        stdout = process.stdout;
      }
      return new this(stdin, stdout).start(argv);
    };

    function CLI(stdin, stdout) {
      this.stdin = stdin != null ? stdin : process.stdin;
      this.stdout = stdout != null ? stdout : process.stdout;
    }

    CLI.prototype.start = function(argv) {
      var input, options,
        _this = this;
      options = this.parseArgs(argv);
      input = '';
      this.stdin.resume();
      this.stdin.setEncoding('utf8');
      this.stdin.on('data', function(data) {
        return input += data;
      });
      return this.stdin.on('end', function() {
        return _this.stdout.write(_this.process(input, options));
      });
    };

    CLI.prototype.parseArgs = function(argv) {
      return optimist(argv).options({
        type: {
          "default": 'amd',
          describe: 'The type of output'
        },
        anonymous: {
          "default": false,
          type: 'boolean',
          describe: 'Do not include a module name'
        },
        'module-name': {
          describe: 'The name of the outputted module',
          alias: 'm'
        },
        stdio: {
          "default": false,
          type: 'boolean',
          alias: 's',
          describe: 'Process a single file by reading stdin and writing to stdout'
        },
        coffee: {
          "default": false,
          type: 'boolean',
          describe: 'Process stdin as CoffeeScript (used with --stdio)'
        }
      }).check(function(args) {
        var _ref;
        return (_ref = args.type) === 'amd' || _ref === 'cjs';
      }).check(function(args) {
        return !(args.anonymous && args.m);
      }).check(function(args) {
        if (args.stdio && args.type === 'amd') {
          return args.anonymous || args.m || false;
        } else {
          return true;
        }
      }).check(function(args) {
        return !(args.coffee && !args.stdio);
      }).argv;
    };

    CLI.prototype.process = function(input, options) {
      var compiler, method;
      compiler = new Compiler(input, options.m, {
        coffee: options.coffee
      });
      method = "to" + (options.type.toUpperCase());
      return compiler[method]();
    };

    return CLI;

  })();

  module.exports = CLI;

}).call(this);
