// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var AbstractCompiler, GlobalsCompiler,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractCompiler = require("./abstract_compiler");

  GlobalsCompiler = (function(_super) {

    __extends(GlobalsCompiler, _super);

    function GlobalsCompiler() {
      return GlobalsCompiler.__super__.constructor.apply(this, arguments);
    }

    GlobalsCompiler.prototype.stringify = function() {
      var export_, globalImports, import_, into, name, output, passedArgs, preamble, receivedArgs, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      passedArgs = [];
      receivedArgs = [];
      into = this.options.into || this.exportAs;
      if (this.exports.length > 0 || this.exportAs) {
        if (this.exportAs) {
          passedArgs.push("window");
        } else if (into) {
          passedArgs.push("window." + into + " = {}");
        } else {
          passedArgs.push("window");
        }
        receivedArgs.push("exports");
      }
      preamble = [];
      preamble.push("\"use strict\"" + this.eol);
      _ref = this.dependencyNames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        globalImports = this.options.imports[name];
        passedArgs.push("window." + globalImports);
        if (name in this.importAs) {
          receivedArgs.push(this.importAs[name]);
        } else {
          receivedArgs.push(globalImports);
          _ref1 = this.imports[name];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            import_ = _ref1[_j];
            this.emitVariable(preamble, import_, "" + globalImports + "." + import_);
          }
        }
      }
      output = [];
      output.push("(function(" + (receivedArgs.join(", ")) + ") {");
      this.indent(output);
      output.push.apply(output, preamble);
      output.push.apply(output, this.lines);
      if (this.exportAs) {
        output.push("exports." + into + " = " + this.exportAs + ";");
      } else {
        _ref2 = this.exports;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          export_ = _ref2[_k];
          output.push("exports." + export_ + " = " + export_ + ";");
        }
      }
      this.outdent(output);
      output.push("})(" + (passedArgs.join(", ")) + ");");
      return this.buildStringFromLines(output);
    };

    return GlobalsCompiler;

  })(AbstractCompiler);

  module.exports = GlobalsCompiler;

}).call(this);
