// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var AbstractCompiler, CJSCompiler,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractCompiler = require('./abstract_compiler');

  CJSCompiler = (function(_super) {

    __extends(CJSCompiler, _super);

    function CJSCompiler() {
      return CJSCompiler.__super__.constructor.apply(this, arguments);
    }

    CJSCompiler.prototype.stringify = function() {
      var dependency, dependencyNumber, export_, import_, line, name, output, variable, variables, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      output = [];
      dependencyNumber = 0;
      output.push("\"use strict\"" + this.eol);
      _ref = this.importAs;
      for (import_ in _ref) {
        if (!__hasProp.call(_ref, import_)) continue;
        name = _ref[import_];
        this.emitVariable(output, name, "require(\"" + import_ + "\")");
      }
      _ref1 = this.imports;
      for (import_ in _ref1) {
        if (!__hasProp.call(_ref1, import_)) continue;
        variables = _ref1[import_];
        if (variables.length === 1) {
          variable = variables[0];
          this.emitVariable(output, variable, "require(\"" + import_ + "\")." + variable);
        } else {
          dependencyNumber++;
          dependency = "__dependency" + dependencyNumber + "__";
          this.emitVariable(output, dependency, "require(\"" + import_ + "\")");
          for (_i = 0, _len = variables.length; _i < _len; _i++) {
            variable = variables[_i];
            this.emitVariable(output, variable, "" + dependency + "." + variable);
          }
        }
      }
      _ref2 = this.lines;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        line = _ref2[_j];
        output.push(line);
      }
      if (this.exportAs) {
        output.push("module.exports = " + this.exportAs + this.eol);
      }
      _ref3 = this.exports;
      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
        export_ = _ref3[_k];
        output.push("exports." + export_ + " = " + export_ + this.eol);
      }
      return output.join('\n');
    };

    return CJSCompiler;

  })(AbstractCompiler);

  module.exports = CJSCompiler;

}).call(this);
