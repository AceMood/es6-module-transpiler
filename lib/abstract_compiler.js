// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var AbstractCompiler, CompileError,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CompileError = require('./compile_error');

  AbstractCompiler = (function() {

    function AbstractCompiler(compiler, options) {
      var name, _ref, _ref1;
      this.compiler = compiler;
      this.exports = compiler.exports;
      this.exportAs = compiler.exportAs;
      this.imports = compiler.imports;
      this.importAs = compiler.importAs;
      this.moduleName = compiler.moduleName;
      this.lines = compiler.lines;
      this.options = options;
      this.dependencyNames = [];
      _ref = this.imports;
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        if (__indexOf.call(this.dependencyNames, name) < 0) {
          this.dependencyNames.push(name);
        }
      }
      _ref1 = this.importAs;
      for (name in _ref1) {
        if (!__hasProp.call(_ref1, name)) continue;
        if (__indexOf.call(this.dependencyNames, name) < 0) {
          this.dependencyNames.push(name);
        }
      }
      this.eol = this.options.coffee ? '' : ';';
      this.functionTail = this.options.coffee ? '' : '}';
      this.assertValid();
    }

    AbstractCompiler.prototype.assertValid = function() {
      if (this.exportAs && this.exports.length > 0) {
        throw new CompileError("You cannot use both `export =` and `export` in the same module");
      }
    };

    AbstractCompiler.prototype.buildPreamble = function(names) {
      var args, dependency, name, number, preamble, _i, _len;
      preamble = [];
      args = [];
      number = 0;
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        if (name in this.importAs) {
          args.push(this.importAs[name]);
        } else {
          dependency = "__dependency" + (number++) + "__";
          args.push(dependency);
          preamble = preamble.concat(this.importsForPreamble(this.imports[name], dependency));
        }
      }
      return [args, preamble];
    };

    AbstractCompiler.prototype.importsForPreamble = function(importNames, dependencyName) {
      var importName, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = importNames.length; _i < _len; _i++) {
        importName = importNames[_i];
        _results.push("var " + importName + " = " + dependencyName + "." + importName + ";");
      }
      return _results;
    };

    AbstractCompiler.prototype.emitVariable = function(output, name, value) {
      var line;
      line = "" + name + " = " + value + this.eol;
      if (!this.options.coffee) {
        line = "var " + line;
      }
      return output.push(line);
    };

    AbstractCompiler.prototype.emitFunctionHeader = function(output, args) {
      var line;
      line = "(" + (args.join(', ')) + ")";
      if (this.options.coffee) {
        if (args.length === 0) {
          line = "  ->";
        } else {
          line = "  " + line + " ->";
        }
      } else {
        line = "  function" + line + " {";
      }
      return output.push(line);
    };

    return AbstractCompiler;

  })();

  module.exports = AbstractCompiler;

}).call(this);
